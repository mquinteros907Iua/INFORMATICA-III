package Practico6.src.Ejercicio1;

import Practico6.structs.AVLTree;
import java.util.Scanner;

/**
 * EJERCICIO 1 - Insertiones y FE paso a paso (caso LL y RR)
 * 
 * Inserte en un AVL la secuencia:30, 20, 10, 40, 50, 60.
 * a) Dibuje el √°rbol tras cada inserci√≥n.
 * b) Calcule alturas y factor de equilibrio (FE) de cada nodo en cada paso.
 * c) Indique qu√© rotaci√≥n se aplica en cada desbalance (LL o RR) y por qu√©.
 */
public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static AVLTree<Integer> arbol = new AVLTree<>();
    private static int[] secuencia = {30, 20, 10, 40, 50, 60};
    private static int pasoActual = 0;

    public static void main(String[] args) {
        System.out.println("=== EJERCICIO 1: INSERTIONES Y FACTOR DE EQUILIBRIO ===");
        System.out.println("Secuencia a insertar: 30, 20, 10, 40, 50, 60");
        System.out.println("a) Dibuje el √°rbol tras cada inserci√≥n.");
        System.out.println("b) Calcule alturas y factor de equilibrio (FE) de cada nodo.");
        System.out.println("c) Indique qu√© rotaci√≥n se aplica (LL o RR) y por qu√©.\n");

        boolean continuar = true;
        while (continuar) {
            mostrarMenu();
            int opcion = leerOpcion();
            continuar = procesarOpcion(opcion);
        }

        System.out.println("\n¬°Ejercicio completado!");
        scanner.close();
    }

    /**
     * Muestra el men√∫ del Ejercicio 1 - Simplificado seg√∫n enunciado
     */
    private static void mostrarMenu() {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("EJERCICIO 1 - INSERTIONES PASO A PASO");
        System.out.println("Secuencia: 30, 20, 10, 40, 50, 60");
        System.out.println("Paso actual: " + pasoActual + "/6");
        if (pasoActual < secuencia.length) {
            System.out.println("Pr√≥ximo: " + secuencia[pasoActual]);
        } else {
            System.out.println("‚úÖ Secuencia completa");
        }
        System.out.println("=".repeat(50));
        
        System.out.println("1. Insertar siguiente elemento y dibujar √°rbol");
        System.out.println("2. Mostrar alturas y factores de equilibrio (FE)");
        System.out.println("3. Analizar rotaciones aplicadas (LL/RR)");
        System.out.println("4. Reiniciar secuencia");
        System.out.println("0. Salir");
        System.out.println("=".repeat(50));
        System.out.print("Opci√≥n: ");
    }

    /**
     * Lee una opci√≥n del usuario con validaci√≥n
     */
    private static int leerOpcion() {
        try {
            return Integer.parseInt(scanner.nextLine().trim());
        } catch (NumberFormatException e) {
            return -1; // Opci√≥n inv√°lida
        }
    }

    /**
     * Procesa la opci√≥n seleccionada por el usuario
     */
    private static boolean procesarOpcion(int opcion) {
        System.out.println();
        
        switch (opcion) {
            case 1:
                insertarYDibujar();
                break;
            case 2:
                mostrarAlturasYFactores();
                break;
            case 3:
                analizarRotaciones();
                break;
            case 4:
                reiniciarSecuencia();
                break;
            case 0:
                return false;
            default:
                System.out.println("‚ùå Opci√≥n inv√°lida. Selecciona 0-4.");
        }
        
        esperarEnter();
        return true;
    }

    /**
     * a) Inserta el siguiente elemento y dibuja el √°rbol tras la inserci√≥n
     */
    private static void insertarYDibujar() {
        if (pasoActual >= secuencia.length) {
            System.out.println("‚ö†Ô∏è  La secuencia ya est√° completa.");
            return;
        }

        int elemento = secuencia[pasoActual];
        System.out.println("PASO " + (pasoActual + 1) + ": Insertando " + elemento);
        
        // Insertar el elemento
        arbol.insertar(elemento);
        pasoActual++;
        
        // a) Dibujar el √°rbol tras la inserci√≥n
        System.out.println("\nüå≥ √ÅRBOL TRAS INSERCI√ìN DE " + elemento + ":");
        arbol.imprimirArbol();
        
        System.out.println("\nTama√±o: " + arbol.obtenerTamanio() + " | Altura: " + arbol.obtenerAlturaArbol());
    }

    /**
     * b) Calcula alturas y factor de equilibrio (FE) de cada nodo
     */
    private static void mostrarAlturasYFactores() {
        if (arbol.estaVacio()) {
            System.out.println("‚ö†Ô∏è  El √°rbol est√° vac√≠o.");
            return;
        }

        System.out.println("üìä ALTURAS Y FACTORES DE EQUILIBRIO:");
        System.out.println("FE = altura(izq) - altura(der)");
        System.out.println("Valores v√°lidos AVL: {-1, 0, 1}\n");
        
        // Mostrar estructura con alturas
        arbol.imprimirArbol();
        
        System.out.println("\n‚úÖ √Årbol balanceado: " + (arbol.estaBalanceado() ? "S√ç" : "NO"));
        System.out.println("üìè Altura total: " + arbol.obtenerAlturaArbol());
    }

    /**
     * c) Indica qu√© rotaci√≥n se aplica en cada desbalance (LL o RR) y por qu√©
     */
    private static void analizarRotaciones() {
        System.out.println("üîÑ AN√ÅLISIS DE ROTACIONES EN LA SECUENCIA:");
        System.out.println("Secuencia: 30, 20, 10, 40, 50, 60\n");
        
        System.out.println("üìù ROTACIONES IDENTIFICADAS:");
        
        System.out.println("\n1Ô∏è‚É£  PASO 3 - Inserci√≥n del 10:");
        System.out.println("   Secuencia problem√°tica: 30 ‚Üí 20 ‚Üí 10");
        System.out.println("   Tipo: DESBALANCE LL (Left-Left)");
        System.out.println("   ¬øPor qu√©? Los nodos forman una cadena hacia la IZQUIERDA");
        System.out.println("   Soluci√≥n: ROTACI√ìN DERECHA en el nodo 30");
        System.out.println("   Resultado: 20 se convierte en la nueva ra√≠z");
        
        System.out.println("\n2Ô∏è‚É£  PASO 6 - Inserci√≥n del 60:");
        System.out.println("   Secuencia problem√°tica: 40 ‚Üí 50 ‚Üí 60");
        System.out.println("   Tipo: DESBALANCE RR (Right-Right)");
        System.out.println("   ¬øPor qu√©? Los nodos forman una cadena hacia la DERECHA");
        System.out.println("   Soluci√≥n: ROTACI√ìN IZQUIERDA en el nodo 40");
        System.out.println("   Resultado: 50 se convierte en la nueva ra√≠z del sub√°rbol");
        
        System.out.println("\nüéØ ESTADO ACTUAL:");
        if (pasoActual >= 3) {
            System.out.println("   ‚úÖ Rotaci√≥n LL aplicada (paso 3)");
        }
        if (pasoActual >= 6) {
            System.out.println("   ‚úÖ Rotaci√≥n RR aplicada (paso 6)");
        }
        if (pasoActual < 3) {
            System.out.println("   ‚è≥ Rotaci√≥n LL pendiente (paso 3)");
        }
        if (pasoActual < 6) {
            System.out.println("   ‚è≥ Rotaci√≥n RR pendiente (paso 6)");
        }
    }

    /**
     * Reinicia la secuencia de inserci√≥n
     */
    private static void reiniciarSecuencia() {
        System.out.print("¬øReiniciar secuencia? (s/n): ");
        String confirmacion = scanner.nextLine().trim().toLowerCase();
        
        if (confirmacion.equals("s") || confirmacion.equals("si") || confirmacion.equals("s√≠")) {
            arbol.limpiar();
            pasoActual = 0;
            System.out.println("‚úÖ Secuencia reiniciada.");
        } else {
            System.out.println("‚ùå Operaci√≥n cancelada.");
        }
    }

    /**
     * Espera a que el usuario presione Enter para continuar
     */
    private static void esperarEnter() {
        System.out.print("\nPresiona Enter para continuar...");
        scanner.nextLine();
    }
}